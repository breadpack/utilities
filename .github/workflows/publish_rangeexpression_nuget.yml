name: Publish RangeExpression NuGet Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Set Version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            TAG=$(git describe --tags --abbrev=0)
            VERSION=${TAG#v}
            echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          fi

      - name: Restore dependencies
        run: dotnet restore utilities.sln

      - name: Build
        run: |
          dotnet build RangeExpression/RangeExpression.csproj \
            --configuration Release \
            --no-restore \
            -p:Version=${PACKAGE_VERSION}

      - name: Test
        run: dotnet test utilities.sln --configuration Release --no-build

      - name: Pack
        run: |
          dotnet pack RangeExpression/RangeExpression.csproj \
            --configuration Release \
            --no-build \
            -p:Version=${PACKAGE_VERSION} \
            --output nupkgs

      - name: Push to NuGet
        run: |
          dotnet nuget push nupkgs/*.nupkg \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate

      - name: Copy DLL and PDB to Unity package
        run: |
          cp RangeExpression/bin/Release/netstandard2.1/*.dll UnityPackage/Runtime/
          cp RangeExpression/bin/Release/netstandard2.1/*.pdb UnityPackage/Runtime/

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add UnityPackage/package.json
          git add UnityPackage/Runtime/
          git diff --staged --quiet || git commit -m "Update Unity package binaries" || echo "No changes to commit"
          git push
